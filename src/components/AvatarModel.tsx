/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, Html } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import avatarImg from '../assets/recovery-pal-avatar.png';


export function AvatarModel({ adherenceLevel }) {
  const group = useRef();
  const [loadError, setLoadError] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  let nodes: any = undefined;
  let materials: any = undefined;
  try {
    const gltf = useGLTF('/avatar.glb');
    nodes = gltf.nodes;
    materials = gltf.materials;
    setIsLoading(false);
  } catch (e) {
    console.error('Failed to load avatar:', e);
    if (!loadError) setLoadError(true);
  }

  // Error fallback if model fails to load
  if (loadError || !nodes || !materials) {
    // Show a static avatar image fallback if 3D model fails
    return (
      <group>
        {/* This is not a 3D mesh, but a React fallback. You may want to style this in the parent. */}
        <Html center>
          <img src={avatarImg} alt="Avatar" style={{ width: 200, height: 200, borderRadius: '50%', objectFit: 'cover', boxShadow: '0 0 16px #0002' }} />
        </Html>
      </group>
    );
  }

  useEffect(() => {
    // Only update morph targets if model loaded
    if (!nodes?.Wolf3D_Head) return;
    const head = nodes.Wolf3D_Head as any;
    if (!head.morphTargetInfluences || !head.morphTargetDictionary) {
      console.warn("3D model structure not as expected. Skipping expression update.");
      return;
    }
    const influences = head.morphTargetInfluences;
    const dictionary = head.morphTargetDictionary;
    // Reset all expressions
    Object.keys(dictionary).forEach(key => {
      influences[dictionary[key]] = 0;
    });
    // Set expressions based on health
    if (adherenceLevel > 80) {
      if(dictionary.mouthSmile) influences[dictionary.mouthSmile] = 0.8;
      if(dictionary.browInnerUp) influences[dictionary.browInnerUp] = 0.2;
    } else if (adherenceLevel <= 50) {
      if(dictionary.mouthFrown) influences[dictionary.mouthFrown] = 1.0;
      if(dictionary.browDownLeft) influences[dictionary.browDownLeft] = 0.8;
      if(dictionary.browDownRight) influences[dictionary.browDownRight] = 0.8;
    }
  }, [adherenceLevel, nodes]);

  useFrame(() => {
    if (nodes?.RightArm) {
      const t = performance.now() / 1000;
      nodes.RightArm.rotation.x = -Math.PI / 2;
      nodes.RightArm.rotation.z = Math.sin(t * 3) * 0.4 - 0.2;
    }
  });

  return (
    <group ref={group} dispose={null} scale={1.5} position={[0, -1.5, 0]}>
      {/* ...existing code for 3D avatar... */}
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={(nodes.Wolf3D_Body as any).geometry} material={materials.Wolf3D_Body} skeleton={(nodes.Wolf3D_Body as any).skeleton} />
      <skinnedMesh geometry={(nodes.Wolf3D_Outfit_Bottom as any).geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={(nodes.Wolf3D_Outfit_Bottom as any).skeleton} />
      <skinnedMesh geometry={(nodes.Wolf3D_Outfit_Footwear as any).geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={(nodes.Wolf3D_Outfit_Footwear as any).skeleton} />
      <skinnedMesh geometry={(nodes.Wolf3D_Outfit_Top as any).geometry} material={materials.Wolf3D_Outfit_Top} skeleton={(nodes.Wolf3D_Outfit_Top as any).skeleton} />
      <skinnedMesh name="Wolf3D_Head" geometry={(nodes.Wolf3D_Head as any).geometry} material={materials.Wolf3D_Skin} skeleton={(nodes.Wolf3D_Head as any).skeleton} morphTargetDictionary={(nodes.Wolf3D_Head as any).morphTargetDictionary} morphTargetInfluences={(nodes.Wolf3D_Head as any).morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={(nodes.Wolf3D_Teeth as any).geometry} material={materials.Wolf3D_Teeth} skeleton={(nodes.Wolf3D_Teeth as any).skeleton} morphTargetDictionary={(nodes.Wolf3D_Teeth as any).morphTargetDictionary} morphTargetInfluences={(nodes.Wolf3D_Teeth as any).morphTargetInfluences} />
      <skinnedMesh geometry={(nodes.Wolf3D_Hair as any).geometry} material={materials.Wolf3D_Hair} skeleton={(nodes.Wolf3D_Hair as any).skeleton} />
      <skinnedMesh geometry={(nodes.Wolf3D_Glasses as any).geometry} material={materials.Wolf3D_Glasses} skeleton={(nodes.Wolf3D_Glasses as any).skeleton} />
      <skinnedMesh name="EyeLeft" geometry={(nodes.EyeLeft as any).geometry} material={materials.Wolf3D_Eye} skeleton={(nodes.EyeLeft as any).skeleton} morphTargetDictionary={(nodes.EyeLeft as any).morphTargetDictionary} morphTargetInfluences={(nodes.EyeLeft as any).morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={(nodes.EyeRight as any).geometry} material={materials.Wolf3D_Eye} skeleton={(nodes.EyeRight as any).skeleton} morphTargetDictionary={(nodes.EyeRight as any).morphTargetDictionary} morphTargetInfluences={(nodes.EyeRight as any).morphTargetInfluences} />
    </group>
  );
}
